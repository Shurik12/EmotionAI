name: EmotionAI CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # System dependencies and environment setup
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          python3 \
          python3-pip \
          python3-venv \
          nodejs \
          npm
    
    - name: Create Python virtual environment
      run: make python_env
    
    - name: Generate models
      run: make models

  # Backend C++ build and tests
  backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
    
    - name: Configure CMake
      run: make configure
    
    - name: Build backend
      run: make build_backend
    
    - name: Run unit tests
      run: make unit_tests
    
    - name: Run integration tests
      run: make integration_tests

  # Frontend build
  frontend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build frontend
      run: make build_frontend

  # Full build verification
  full-build:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install all dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build python3 python3-pip python3-venv nodejs npm
    
    - name: Complete build
      run: make build

  # Python code quality and tests
  python-checks:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Create virtual environment
      run: make python_env
    
    - name: Lint Python code
      run: |
        . venv/bin/activate && pip install flake8 black
        . venv/bin/activate && flake8 contrib/ --count --select=E9,F63,F7,F82 --show-source --statistics
        . venv/bin/activate && flake8 contrib/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check Python formatting
      run: |
        . venv/bin/activate && pip install black
        . venv/bin/activate && black --check contrib/

  # Security checks
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Run safety check
      run: |
        pip install safety
        safety check --full-report
    
    - name: Check for secrets in code
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml

# Workflow completion
  success:
    runs-on: ubuntu-latest
    needs: [full-build, python-checks, security]
    if: always()
    steps:
      - name: Notify workflow status
        run: |
          echo "Workflow completed"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Python checks: ${{ needs.python-checks.result }}"
          echo "Security: ${{ needs.security.result }}"
